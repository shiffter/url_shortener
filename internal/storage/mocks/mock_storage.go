// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/interfaces.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetOriginalUrl mocks base method.
func (m *MockStorage) GetOriginalUrl(ctx context.Context, shortUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalUrl", ctx, shortUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalUrl indicates an expected call of GetOriginalUrl.
func (mr *MockStorageMockRecorder) GetOriginalUrl(ctx, shortUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalUrl", reflect.TypeOf((*MockStorage)(nil).GetOriginalUrl), ctx, shortUrl)
}

// SaveUrlPair mocks base method.
func (m *MockStorage) SaveUrlPair(ctx context.Context, shortUrl, originalUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUrlPair", ctx, shortUrl, originalUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUrlPair indicates an expected call of SaveUrlPair.
func (mr *MockStorageMockRecorder) SaveUrlPair(ctx, shortUrl, originalUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUrlPair", reflect.TypeOf((*MockStorage)(nil).SaveUrlPair), ctx, shortUrl, originalUrl)
}
